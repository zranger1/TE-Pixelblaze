{
  "name": "TE Color Twinkles",
  "id": "A7JjHnjeCwMFXeLxP",
  "sources": {
    "main": "// Titanic's End-colored variation on the stock \"color twinkles\"\n// pattern\n\nvar TE_Cyan_Blue_Purple = [\n  0.0, 0.1326, 0.0038, 0.16,        // plumice dark purple\n  0.1666, 0.1059, .0055, 0.4818,    // sunset purple  \n  0.3333, 0.061, 0.0246, 0.5610,    // synwavedyn purpler\n  0.5, 0.4086, 0.25196, 0.9006,     // IceGrad desat light purple  \n  0.6667, 0.1964, 0.6029, 1.0,      // sunwave cyan  \n  1.0, 0.1246, 0.6275, 0.8277,      // iecOlate cyan\n  ]\n\nvar TE_Pink_Purple = [\n    0.0, 0.1059, 0.0055, 0.4818,    \n    0.3333, 0.1059, 0.02977, 0.5610, \n    0.6667, 0.3986, 0.0246, 0.2034, \n    1.0, 0.9006, 0.2105, 0.4603,\n]\n\nvar TE_Cyan_Green = [\n    0.0, 0.0038, 0.3888, 0.2214,    \n    0.3333, 0.0055, 0.7924, 0.346,\n    0.6667, 0.1273, 0.9006, 0.7924, \n    1.0, 0.1569, 0.609, 0.8277, \n]\n\nvar TE_Orange_Green = [\n    0.0, 0.1301, 0.9231, 0.0015,    \n    0.5, 0.5206, 0.9156, 0.0339, \n    1.0, 0.9231, 0.5206, 0.0629,\n]\n\nvar TE_Cyan_Ice = [\n    0.0, 0.0024, 0.1164, 0.9006,    \n    0.1667, 0.0465, 0.2599, 0.9006, \n    0.3333, 0.0517, 0.4982, 0.8277, \n    0.5, 0.1963, 0.6029, 1.0,       \n    0.6667, 0.1246, 0.6275, 0.8277,  \n    1.0, 0.6275, 0.7108, 1.0,      \n]\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\n// control variables for palette switch timing (these are in seconds)\nexport var PALETTE_HOLD_TIME = 2\nexport var PALETTE_TRANSITION_TIME = 2;\nvar PALETTE_HOLD = 0;\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\nspeed = 0.333;\nexport var density = 0.1;\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// UI Controls\nexport function sliderSpeed(v) {\n  speed = v;\n}\n\nexport function sliderDensity(v) {\n  density = 1-max(v,0.002);\n}\n\n// how long we stick with a palette before transitioning to\n// the next one\nexport function sliderHoldTime(v) {\n  PALETTE_HOLD_TIME = 20 * v * v;\n}\n\n// time to cross-blend between palettes when switching\nexport function sliderTransitionTime(v) {\n  PALETTE_TRANSITION_TIME = 10 * v * v;\n}\n\nexport function togglePaletteHold(v) {\n  PALETTE_HOLD = v;\n}\n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / (PALETTE_SIZE - 1);\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    if (!PALETTE_HOLD) {\n      runTime = 0\n      inTransition = 1\n    }\n  }\n  \n  // pattern-specific code below this line\n  timebase = (timebase + (delta * speed / 1000)) % 3600;  \n  t1 = timebase / 3.333;\n}\n\nexport function render(index) {\n  h = sin(index / 3 + PI2 * sin(index / 2 + t1))\n  v = wave(index / 3 / PI2 + sin(index / 2 + timebase))\n  v = v > density ? v * v * v * v : 0\n  paint(h,v)\n}\n"
  },
  "preview": "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"
}