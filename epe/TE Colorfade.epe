{
  "name": "TE Colorfade",
  "id": "x8rsp3H6Gc2gEr3GW",
  "sources": {
    "main": "// Animated Palette cross fade in TE colors\n// 8/2023 ZRanger1\n\nvar TE_Cyan_Blue_Purple = [\n  0.0, 0.1326, 0.0038, 0.16,  \n  0.1666, 0.1059, .0055, 0.4818, \n  0.3333, 0.061, 0.0246, 0.5610, \n  0.5, 0.4086, 0.25196, 0.9006,   \n  0.6667, 0.1964, 0.6029, 1.0,        \n  1.0, 0.1246, 0.6275, 0.8277,      \n  ]\n\nvar TE_Pink_Purple = [\n    0.0, 0.1059, 0.0055, 0.4818,    \n    0.3333, 0.1059, 0.02977, 0.5610, \n    0.6667, 0.3986, 0.0246, 0.2034, \n    1.0, 0.9006, 0.2105, 0.4603,\n]\n\nvar TE_Cyan_Green = [\n    0.0, 0.0038, 0.3888, 0.2214,    \n    0.3333, 0.0055, 0.7924, 0.346,\n    0.6667, 0.1273, 0.9006, 0.7924, \n    1.0, 0.1569, 0.609, 0.8277, \n]\n\nvar TE_Orange_Green = [\n    0.0, 0.1301, 0.9231, 0.0015,    \n    0.5, 0.5206, 0.9156, 0.0339, \n    1.0, 0.9231, 0.5206, 0.0629,\n]\n\nvar TE_Cyan_Ice = [\n    0.0, 0.0024, 0.1164, 0.9006,    \n    0.1667, 0.0465, 0.2599, 0.9006, \n    0.3333, 0.0517, 0.4982, 0.8277, \n    0.5, 0.1963, 0.6029, 1.0,       \n    0.6667, 0.1246, 0.6275, 0.8277,  \n    1.0, 0.6275, 0.7108, 1.0,      \n]\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\nexport var repeats = 4;\nvar speed = 1.25;\nvar freeze = 0;\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\n// control variables for palette switch timing (these are in seconds)\nexport var PALETTE_HOLD_TIME = 1\nexport var PALETTE_TRANSITION_TIME = 1;\nvar PALETTE_HOLD = 0;\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// UI Controls\nexport function sliderSpeed(v) {\n  speed = clamp(-2 + 4 * v,-2,2);\n}\n\nexport function sliderRepeats(v) {\n  repeats = clamp(v * 8,1,8);\n}\n\n// how long we stick with a palette before transitioning to\n// the next one\nexport function sliderHoldTime(v) {\n  PALETTE_HOLD_TIME = 20 * v * v;\n}\n\n// time to cross-blend between palettes when switching\nexport function sliderTransitionTime(v) {\n  PALETTE_TRANSITION_TIME = 10 * v * v;\n}\n\n// stay  with the current palette\nexport function togglePaletteHold(v) {\n  PALETTE_HOLD = v;\n}\n\n// stop animation\nexport function toggleFreeze(v) {\n  freeze = v; \n}\n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / (PALETTE_SIZE - 1);\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    if (!PALETTE_HOLD) {\n      runTime = 0\n      inTransition = 1\n    }\n  }\n  \n  // pattern-specific code below this line\n  timebase = (timebase + ((delta * speed) / 1000)) % 3600;  \n  t1 = (freeze) ? 0: frac(timebase);\n}\n\nexport function render(index) {\n  paint(t1 + triangle(repeats * index/pixelCount));\n}"
  },
  "preview": "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"
}