{
  "name": "TE Colorfade",
  "id": "x8rsp3H6Gc2gEr3GW",
  "sources": {
    "main": "// Animated Palette cross fade in TE colors\n// 8/2023 ZRanger1\n\nvar TE_Cyan_Blue_Purple = [\n  0.0, 0.1326, 0.0038, 0.16,  \n  0.1666, 0.1059, .0055, 0.4818, \n  0.3333, 0.061, 0.0246, 0.5610, \n  0.5, 0.4086, 0.25196, 0.9006,   \n  0.6667, 0.1964, 0.6029, 1.0,        \n  1.0, 0.1246, 0.6275, 0.8277,      \n  ]\n\nvar TE_Pink_Purple = [\n    0.0, 0.1059, 0.0055, 0.4818,    \n    0.3333, 0.1059, 0.02977, 0.5610, \n    0.6667, 0.3986, 0.0246, 0.2034, \n    1.0, 0.9006, 0.2105, 0.4603,\n]\n\nvar TE_Cyan_Green = [\n    0.0, 0.0038, 0.3888, 0.2214,    \n    0.3333, 0.0055, 0.7924, 0.346,\n    0.6667, 0.1273, 0.9006, 0.7924, \n    1.0, 0.1569, 0.609, 0.8277, \n]\n\nvar TE_Orange_Green = [\n    0.0, 0.1301, 0.9231, 0.0015,    \n    0.5, 0.5206, 0.9156, 0.0339, \n    1.0, 0.9231, 0.5206, 0.0629,\n]\n\nvar TE_Cyan_Ice = [\n    0.0, 0.0024, 0.1164, 0.9006,    \n    0.1667, 0.0465, 0.2599, 0.9006, \n    0.3333, 0.0517, 0.4982, 0.8277, \n    0.5, 0.1963, 0.6029, 1.0,       \n    0.6667, 0.1246, 0.6275, 0.8277,  \n    1.0, 0.6275, 0.7108, 1.0,      \n]\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\nexport var repeats = 4;\nvar speed = 1.25;\nvar freeze = 0;\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\n// control variables for palette switch timing (these are in seconds)\nexport var PALETTE_HOLD_TIME = 1\nexport var PALETTE_TRANSITION_TIME = 1;\nvar PALETTE_HOLD = 0;\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// UI Controls\nexport function sliderSpeed(v) {\n  speed = clamp(-2 + 4 * v,-2,2);\n}\n\nexport function sliderRepeats(v) {\n  repeats = clamp(v * 8,1,8);\n}\n\n// how long we stick with a palette before transitioning to\n// the next one\nexport function sliderHoldTime(v) {\n  PALETTE_HOLD_TIME = 20 * v * v;\n}\n\n// time to cross-blend between palettes when switching\nexport function sliderTransitionTime(v) {\n  PALETTE_TRANSITION_TIME = 10 * v * v;\n}\n\n// stay  with the current palette\nexport function togglePaletteHold(v) {\n  PALETTE_HOLD = v;\n}\n\n// stop animation\nexport function toggleFreeze(v) {\n  freeze = v; \n}\n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / (PALETTE_SIZE - 1);\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    if (!PALETTE_HOLD) {\n      runTime = 0\n      inTransition = 1\n    }\n  }\n  \n  // pattern-specific code below this line\n  timebase = (timebase + ((delta * speed) / 1000)) % 3600;  \n  t1 = (freeze) ? 0: timebase;\n}\n\nexport function render(index) {\n  var k = frac(t1 + triangle(repeats * index/pixelCount));\n  k = k * k;\n  paint(k,k);\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACWAGQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDxKxsJLqQJGpx3NdnY6ba6VZtcXDKkaDc7tT0hstB083FyQqLwAOrH0Hqa4zV9cu9bkVXAjgQkpEnT6n1OOM/oMmu+dRR92JjKbqPlht3LOueJJdXUW0EbQWgOSuctJzwW/Tj19eMYwWSErLGxV1O4MpwQexBqxbWryuEjXcxrXutBlhtVkXLNjkVKo3V5vU2jCMFY0vDviFb5V07UX/f/AHYpW/5af7J/2vQ9/r1drWgZ3SwjDfzrjZYcE4GCOoro/D3iZbaIWOpsTbqP3UuCSn+ycckenp9OhGbg+WRi4SpPmht2/wAjBltysmHUqw6g1r6Tosl26s64j9PWuludFt7qeKdNrIfmDLyCD0PvUGra7baAotoI1muyMlc4EfHBb9OPT04zo5RguYp1017mrZPd3+n+HbYCUhpym6OFerdvwHufQ4zXB3t7c6reNc3L7nPAA6KOwA7Co5ZZ765e4uJGeRzlmPetPTdLkvZAApEY7+tZKLqO8th06VveluULK9udKvVubZ9rrwQejDuCO4rvLS+0/wARWxERCzhN0kLdV7fiPceoziuR1LS5LOQhlJTPB9KzYpZ7G5S4t5GjkQ5Vh2ocXSd47BUpX96L1Oju/Dsq3DCM4X0xRV6DxrYPAhurWcT4+cRKCufbJz/nvRWnt49yFWqLeJyt/qV5rE4kupNwXOxQMKgJ6Af168Cn2VhJcuEjX6mptP017pwACF7muuiis9D083NyQka8ADqx9B6mlGKp6y3NnamrJCWOm2ulWbXNyyoiDc7t/n9KZY+JtP1W9Nl5TwhsCFpCPnPocdD6cnP14rlda1241uVF2eTbpysIbPPck9z/AC/POa0OFyOtQ5zlrHYw9lKfvSev5HY61oGS0sIw3865KeAqxBXaw6iuh8OeI1iVNO1F/wBz92KZv4P9lv8AZ9D2+nTS1bR47mMTQkEMNyuvIIPf3FWpRqKzNYSfwzOZ07xHqOlWj2sLIyHOzzFyYye6/wA8HI/XOeFeaRpJWZmY7mZjkknuasTWrxy7HQ7gfzra0nRWmdZJRx2FJUbP3noUoRi3Ig0rRpLtwzqRH6etdPdXdh4esy0hVpsfJApG5vT6Dg8/14qvqWt2mgRm3jTzbzZlUH3UPbd/PA/TINcNLLPfXL3FxIZJHOWY96JVG/dgZSUqrtsj0G2u7DxDZhoyqzY+eAn5l9fqORz/AF4rmNV0aS0csikx+npWLFLPY3KXFvIY5EOVYdq7nTdbtNfjFvInlXmzLIfuue+3+eD+uCaI1GvdmEVKk7bo4RoeeOlFdXd+HwbhimVB7Ciq9lTZv7rNGWa00GwE84yx4iiHBc/0Hqe35CuMv9SvNXmEl1JuC5CIBhUBPYf168CoJZJr24eedy8jnLMat2toZGAAwvc1nGDnrLYFHmY21s3mYKg+prWudG2WysmdwH51oQR22m2Rurk7Il6erH0HqagtPFEF7dfZ7uBLaFgBE+7O0/7R9D64GO/qKdZRdkauNrJnMzQEEgjDCtXQvELaWptbtXlszkgLy0Z9s9j3H4+ub2pacjYdMEMMq6nII/rXPz25UkEYNEoKfvQ3JnTaO2ext70w3MBWWJ/mR171R1fxCulMbPTwj3K5EkhGRGfQerD8h055xy9vqN9ZQSW9vcyRRuQzBTg5HcHqPw61DFFnkis1zz90z30QBXmkaSRmZmJLMxyWPcmtbTtNa4cMw+Xt706wsDI6lhz2Fa93qtroaGIJ5t5tyqD7qem7+eP5ZzWjcaSstzVQsrmNqOmtbuSB8v8AKskq8MiyRsyspBVlOCp7HNdha6na63AqHbFe4O6Hs2OpU/069fTNY9/YFHJUfUUJxqqz3Bwurl2Hxs4hRbmwWWYDDSLJs3e+NpxRXOND83HFFR7OoupjyPsXLa1MhHHy1slbfSbMXN0Cc8RRA8uf8PU9vyFFzLBolsryKr3Lj91D6f7R9v5/mRzdxc3OoXHnXMhkfAXJAAAHYAcCnOo5vlidkpRpaLckvtQudVmV5yoVBhI0GFX1wPeoWh+UYqzBblyAo/Gr02nlYVIByR371pGnGKs+pkqUppyZFo+ri0/0O8y1mx4PUxH1Ht6j8R76N/YKy+ZE6yRn7kiEEH8RXPyw8nsas6Vqr6bKY5VMlpIf3kfcf7S+/wDP8iMnGVJ3WxUKnL7k9iOSEq4DDBq/ZWDySL8pz2Fagsob5kmsnWaEsQGAPB9CDyKoX+uR2qSWmncv91roH8wv/wAV9cdjVyrq3u7s15IU/elsS3urRaSXtrVVlu8YaQ/diPpjuev09+RXOhXldpJGZmYksxOSTRHFnk1pWlmZWHBx6etKFL7UzBuVV67GaVeJ1kjYqynIYHBBrpbLVLfVokhuWWK/ztBxhZf6A+3r064GZd2ZiY8cenpWbJFjkUTpfagNOVF6bG5PpxWYg5U+mKKS08UtFbrHd2n2mRePN8zaSO2eDk+//wCuip+sSWhtz0HrcxSZbmUyzSPI56u7ZJ/E1ct7VpDwMAd6s22lySY/kBWlPJbaHFG86ebM3KQA4OPUnsP5/ni+aFJabmNKEfikxFS10u2S4vNwQnCxqMs/rgVTg8SefeMl7Eq2b8IEGTD756n3/T0rJubm41S8M0x3OeAAOFHYAdhSyWbqgIWsuWU/eYSxDv7miRvahpm0B1IZWGVdeQR2rCmgIJBGCKl0rVH02VopVMlq5/eR9wfUe/8AP8iN+60xLiBbi2dZIZBlHWtIVfszLfJVjdbnKxz3Fsk0UUroky7ZAp+8P8/zI7mlih7kVoSadIsgHv6VfsdHkdxxk/TpVKEIPmMYR5na5VsrBpXGVJJ6Crt7qVvpUTQ2zLLfZ2k4ysX9Cfb169MGLUdZgs4Da6bIHnbIknXonsp7n3/L2wYLZ5TwOPWspSdV2WxrOqoLlhv3Ojsb+DWIfKuGSK+XA5wBN249/b8vQUr2waJzhSD3FZM9s8Z5U4re07WILyAW2pSBJlwI526P2wx9ff8AP3IylSdnsEKqmuWe/cw2hGelFdHPoriY5Ug+1Fbc1Jkuki3q2qQaEFhhRJr04JVuVjH+1jufT8fTPK7LjULpp7h2eVzli3f/AAqSC0kmlMspLyMSxYnJJ9a6PTtLJwdtci7s8+riPsopWOmdAFrVn0oiAHb2q5eXdjoNqZJ2VpsZSAMNz+n0HB5/rxXN2fi2+hume+QTW0z7mQDBjGMYT9OD1x6kmqc2hwTauyC903knbyPSqmn39xot35iDfE3EkZPDj+h9D/8AXFdzLaQX1slzbOskUgyrL3rm7/TShPy9aG77maruEtTdg+wajCLq2nTygu6QMQDGOfvDt0P5Vz+seIEuYTZaYrrE2RLKRguPQei/qenHOcd7WWN2SNmVXG1hnqM5wfXkD8qvWen5IAXrUavRm88TGKuupWtNPLkFhmujsdLLY+Wr+n6TwMrVHxBry2W7TdNbNz92WVf+Wf8Asj/a9T2+vS+ayMqcnNiX2llc/LXOXenlGJUYrpdC8QDUX+w6mVF0xxHLgKH/ANk44B9PX69bmoaVwcLxRzXWoVJODOYsvE2oafbLbeXDMqcKZlJKj0yCOKKklsCJCMUVNiljdNzf03SixBK8VY1bXLPQonhj2zX2BtiwcLnoWP8ATr09c1BrXiaHTRJY6ePMvB8pfAKRnv8AVh6dPXoRXJ21o80pllLPIxJZmOSSeppN8ui3OKlTsueoIsc99dvc3TtJNIcsT6/5/Krs1h+5Hy9q2NO0suRxxW1caUptwAOQKlJsieJk5XRxGn6rfaDNiE77Vm3SQt0bt+B9x6DOcV20f2PWrFbq1YMjcEHqp7gjsa5m/wBOKk5Wsy2u77RLlprKTaGxvjIyrAHoR/k8mhSto9ja6rx00Zu3OllZwNvetnTtKCAMwp9hq2narY/bTIkPl4EyyMB5ZPqT2PY9/rxXKa/r8msymzs9yWKHk9DKR3Pt6D8T2AuyjqzCFKcpWeliz4i8Rfad+m6Y37j7s0y/x/7I/wBn37/Trk2VgeOOalsdP6ACuq03SujMOKjWTNatdRXJA4+9sOvGD61saB4laOQWGryl0Y/u7iQ5Kk9mJ7e/b6dNfUtK6so4rlr7T+oK0axYUq6kuSZ3E2lI8hOBRXB2+ta1YRCC3u5PKX7oZVfAxjA3A4HHTpRVc0AeFl0aG2VhyOMmun03St+CRxU+m6VnDMvFRa34kg0yJ7PT2WS9zsJAysR9fQn27HOemCox6sybnXlZFrWNXt/D9oERVkvJB+7i/wDZm9v5/mRy1h4m1SwuWnuXe7ilzvjd8AH1X+7+Ax+mKNtaPNKZZSzyMcszHJJPU1ozWB8kcdqHN9Ddeype49bnWobTWrBbq1bcjcEHqp7gjsa57UNNKE5Wsezvb3QrpprQgq4w8bjKt6ZHt/nrXb2N5aeILDzoflkHEkRPKH+o9D/9cU9JbbmNSk6fvw2OAmsP33Axk8itOx0/OAFrYudKYXCjbnmtey0+O2iMspVVUbmZjgADqTUqN2KeIlOKiR6dpYUBmFYmt+KnMkljpBXYAVe5HXP+wf6/l0zVLXfEU2qzG1sHeKyXKlhkGXtz/s+35+grWVh0AWm5W0iaQpRpLnqb9jW0TxU+9LHVyuzG1Lg9c/7Z/r+fUmtrUdLDAsorjr3T+oK1c0TxLPpkkdpqDGWywEVsZaL+pHt6dOmCKV9JBOlGquenv2CbTyJCMGiuxexhuMSoVZHAKspyCPUGin7NnP7Sa0Oe17xRGsJsdHk3SNlZLheAg6YU9z7jt09uesdOJIOMn1qzp+mE4yK6vTtLAAytc8qt2drtFcsCnp2kZIJFbU+lI1uFC9BWb4g1+PRYvsdlte/Zee4hHqff0H4nsDytlrOpadqLai0jTtMczo54kH9MdvT6cVSkrakrDX1luauoaUVzxWGhu9Lujc2UjRSgEHABBHoQeDXoFtdWGu2rTWcm/bjehGGQkZwR/UccHmsbUdK6/LUupZjipU9GW9M8S6bf2RnvJYrW4hH71HOM8dV7n6dR09CeV1nV59fugqq0VlGf3cR6n/ab3/l+ZMNxphE4G3PNa+n6Xkj5ap1ropRhB80VqVLDTC20BcCur07SQoBYVZs7CO3iMspVEUbmZjgADqSa5XXPFD6mj2GnK0VqSVebo0q+gHYHn3Ix05FKM76sj2LqO8joNR0kMCVFcrf6YV3ArkVa0PxS+mJHYairS2oIVJs5aJfQjuBx7gZ68CupvLCOeISxFXRhuVlOQQehBolO2oexdN3iecRyahZgxWt3PEhOSscjKM+vFFdJPpX70/LRU+18zX2j6o3dPsEGOlU/FGvzaO0NhYgJcSKJDMQCFXJGAD1Jwev9eCiuWjrLU2ppWbOUs7QzSGSVy7udzMxyWJ6kmte4sE+zjp0ooolJ8xk9WY0U9xot8t3ZyBZF6g/dde4I7iu/03ULfxBpxuooni2tsdXxw2ATg9xz14+lFFXN3gmbRXNF3KNzp6eevTrWtY2SKB0oorC7M4RTlZnCax4juNdJtox5FgHyEH3nxjG4/rgfrgGn6dYJkHiiiuiq7WSHU3sGoWCcnik0XxJNoQNtMhuLItwm75oyTyV9R149e45yUUUne6YU97HfS2aFyaKKK57stwjfY//Z"
}