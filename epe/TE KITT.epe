{
  "name": "TE KITT",
  "id": "aPeKwmMA7FPbSZp4n",
  "sources": {
    "main": "// Consolidated Titanic's End Palettes for Pixelblaze\n// v1.0\n\nvar TE_Cyan_Blue_Purple = [\n  0.0, 0.1326, 0.0038, 0.16,        // plumice dark purple\n  0.1666, 0.1059, .0055, 0.4818,    // sunset purple  \n  0.3333, 0.061, 0.0246, 0.5610,    // synwavedyn purpler\n  0.5, 0.4086, 0.25196, 0.9006,     // IceGrad desat light purple  \n  0.6667, 0.1964, 0.6029, 1.0,      // sunwave cyan  \n  1.0, 0.1246, 0.6275, 0.8277,      // iecOlate cyan\n  ]\n\nvar TE_Pink_Purple = [\n    0.0, 0.1059, 0.0055, 0.4818,    \n    0.3333, 0.1059, 0.02977, 0.5610, \n    0.6667, 0.3986, 0.0246, 0.2034, \n    1.0, 0.9006, 0.2105, 0.4603,\n]\n\nvar TE_Cyan_Green = [\n    0.0, 0.0038, 0.3888, 0.2214,    \n    0.3333, 0.0055, 0.7924, 0.346,\n    0.6667, 0.1273, 0.9006, 0.7924, \n    1.0, 0.1569, 0.609, 0.8277, \n]\n\nvar TE_Orange_Green = [\n    0.0, 0.1301, 0.9231, 0.0015,    \n    0.5, 0.5206, 0.9156, 0.0339, \n    1.0, 0.9231, 0.5206, 0.0629,\n]\n\nvar TE_Cyan_Ice = [\n    0.0, 0.0024, 0.1164, 0.9006,    \n    0.1667, 0.0465, 0.2599, 0.9006, \n    0.3333, 0.0517, 0.4982, 0.8277, \n    0.5, 0.1963, 0.6029, 1.0,       \n    0.6667, 0.1246, 0.6275, 0.8277,  \n    1.0, 0.6275, 0.7108, 1.0,      \n]\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\n// control variables for palette switch timing (these are in seconds)\nexport var PALETTE_HOLD_TIME = 2\nexport var PALETTE_TRANSITION_TIME = 2;\nvar PALETTE_HOLD = 0;\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// UI Controls\nexport function sliderSpeed(v) {\n  speed = clamp(v * 2,0.05,2);\n}\n\nexport function sliderSize(v) {\n  tailPct = v;\n  shift = 1 - tailPct  \n}\n\nexport function sliderPulses(v) {\n  pulseCount = clamp(v * 10,1,10);\n}\n\n// how long we stick with a palette before transitioning to\n// the next one\nexport function sliderHoldTime(v) {\n  PALETTE_HOLD_TIME = 20 * v * v;\n}\n\n// time to cross-blend between palettes when switching\nexport function sliderTransitionTime(v) {\n  PALETTE_TRANSITION_TIME = 10 * v * v;\n}\n\nexport function togglePaletteHold(v) {\n  PALETTE_HOLD = v;\n}\n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / (PALETTE_SIZE - 1);\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    if (!PALETTE_HOLD) {\n      runTime = 0\n      inTransition = 1\n    }\n  }\n  \n  // pattern-specific code below this line\n  timebase = (timebase + ((delta * speed) / 1000)) % 3600;  \n  t1 = frac(timebase)   \n}\n\nexport var speed = 0.5;\nexport var tailPct = .6;\nexport var pulseCount = 1;\nvar t1, shift = 1 - tailPct;\n\nfunction pulse(x) {\n  var halfsaw = triangle(x - t1) * square(x - t1, .5)\n  return max(0, (halfsaw - shift) / tailPct)\n}\n\n// Add your pattern render() code here -- just use paint to get color\n// from the current blended palette.\nexport function render(index) {\n  pct = (pulseCount * index) / pixelCount / 2\n  v = pulse(pct) + pulse(-pct)\n  paint(pct,v)\n}\n\n"
  },
  "preview": "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"
}