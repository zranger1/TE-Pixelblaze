{
  "name": "TE Stacker",
  "id": "Rqs84YonXzto9RJ3W",
  "sources": {
    "main": "/*\nIt's... 1D Tetris! Sort of.  \n\nSubdivide the strip into 1 to 6 segments of equal length, then fill each segment \nwith color from the edges to the center.  There are several color modes described below,\nand sliders animation speed and fill \"block\" size.\n\ncolorMode 0: User selected solid colors\ncolorMode 1: Animated Rainbow\ncolorMode 2: TE Palette color bands\n\nMIT License\n8/26/2021-2023 ZRanger1\n*/\n\n// initial values for colors\n// h1 is the \"stacked\" color, h2 the \"traveling\" color\nvar h1 = 0.3333, s1 = 1,v1 = 1;\nvar h2 = 0.9, s2 = 1, v2 = 1;\n\nvar divisions = 3;    // number of segments\nvar count;            // pixels per segment\nvar center;           // index (offset) of segment's center\nvar pos;              // current pixel position\nvar counter;          // count of pixels currently \"stacked\" in a segment\nvar t1;               // color animation timer\n\n// Color mode support - various ways of coloring our traveling and stacked pixels.\n// Really just an array of pointers to very short expressions that set the colors.\n// Each expression takes the current pixel index as a parameter and returns a \n// hue value that can be plugged directly into hsv()\n//\n// By default, start in \"TE\" mode, with 3 segments.\nvar colorMode = 2;    \nvar nColorModes = 3;\nvar colorModes = array(nColorModes);\ncolorModes[0] =  (f) => h1;           \ncolorModes[1] =  (f) => h1+t1+f/center\ncolorModes[2] =  (f) => .618 * round(f / size);\n\n// \"pixel\" block size information\nexport var size = 4;\nvar halfSize = size / 2;\n\n// speed control.  How many milliseconds do we wait between\n// pixel movements?\nvar frameTime;\nvar msPerFrame = 10\n\n// Slider UI\nexport function hsvPickerColor1(h,s,v) {\n  h1 = h; s1 = s; v1 = v;\n}\n\nexport function hsvPickerColor2(h,s,v) {\n  h2 = h; s2 = s; v2 = v;\n}\n\nexport function sliderSpeed(v) {\n  msPerFrame = 250 * (1-v);\n}\n\nexport function sliderSize(v) {\n  size = 1+floor(10*v);\n  halfSize = size / 2;\n}\n\nexport function sliderSegments(v) {\n  var n = 1+floor(v*5);\n  if (divisions != n) {\n    divisions = n;\n    initSegments();\n  }\n}\n\nexport function sliderColorMode(v) {\n  colorMode = clamp(v * nColorModes,0,nColorModes-1);\n}\n\n// Precalculate variables to reflect current segment\n// count setting.  Called when pattern starts, and \n// when the user changes segment size.\nfunction initSegments() {\n  count = floor(pixelCount / divisions)\n  center = floor(count / 2);  \n  pos = 0;\n  counter = 0;  \n}\n\ninitSegments();\n\nexport function beforeRender(delta) {\n  frameTime += delta; // pixel movement timer\n  t1 = time(0.03);    // color animation timer.\n  \n  // at frame movement time, calculate the current position of\n  // our moving block within a segment. If it's reached the \n  // current \"stack\", reset it to the outside edges.\n  //\n  // This calculation only needs to be done for one segment since\n  // all the segments are the same size.  We use modulo arithmetic \n  // in render() to draw as many duplicates as we need.\n  if (frameTime >= msPerFrame) {\n    pos++;\n    if (pos > (center-counter)) { \n      counter+=size\n      if (counter >= center) counter = 0;\n      pos = 0;\n    }\n    frameTime = 0\n  }\n}\n\nexport function render(index) {\n  index = index % count;            // subdivide strip into \"blocks\" of user specified size\n  index = center-abs(index-center); // where is the current pixel in the current segment?\n  \n  // if the pixel has reached the \"stacked\" region, color it accoring to color mode\n  // (by calling the user-selected coloring function from our array of pointers.)\n  if (index > (center - counter)) {\n    hsv(colorModes[colorMode](index),s1,v1);\n  }\n  // if it's in our traveling block, use the user's \"travelling\" color\n  else if (abs(index - pos) < halfSize) {\n    hsv(h2,s2,v2);\n  }\n  // otherwise, it's not (yet) part of one of our colored regions, turn it off.\n  else {\n    rgb(0,0,0);\n  }\n}"
  },
  "preview": "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"
}